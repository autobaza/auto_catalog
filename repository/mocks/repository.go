// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	catalog "github.com/autobaza/auto_catalog/protos"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetCarMarks provides a mock function with given fields: _a0
func (_m *Repository) GetCarMarks(_a0 string) []*catalog.CarMark {
	ret := _m.Called(_a0)

	var r0 []*catalog.CarMark
	if rf, ok := ret.Get(0).(func(string) []*catalog.CarMark); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.CarMark)
		}
	}

	return r0
}

// Repository_GetCarMarks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCarMarks'
type Repository_GetCarMarks_Call struct {
	*mock.Call
}

// GetCarMarks is a helper method to define mock.On call
//   - _a0 string
func (_e *Repository_Expecter) GetCarMarks(_a0 interface{}) *Repository_GetCarMarks_Call {
	return &Repository_GetCarMarks_Call{Call: _e.mock.On("GetCarMarks", _a0)}
}

func (_c *Repository_GetCarMarks_Call) Run(run func(_a0 string)) *Repository_GetCarMarks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_GetCarMarks_Call) Return(_a0 []*catalog.CarMark) *Repository_GetCarMarks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_GetCarMarks_Call) RunAndReturn(run func(string) []*catalog.CarMark) *Repository_GetCarMarks_Call {
	_c.Call.Return(run)
	return _c
}

// GetCarModels provides a mock function with given fields: _a0
func (_m *Repository) GetCarModels(_a0 string) []*catalog.CarModel {
	ret := _m.Called(_a0)

	var r0 []*catalog.CarModel
	if rf, ok := ret.Get(0).(func(string) []*catalog.CarModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.CarModel)
		}
	}

	return r0
}

// Repository_GetCarModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCarModels'
type Repository_GetCarModels_Call struct {
	*mock.Call
}

// GetCarModels is a helper method to define mock.On call
//   - _a0 string
func (_e *Repository_Expecter) GetCarModels(_a0 interface{}) *Repository_GetCarModels_Call {
	return &Repository_GetCarModels_Call{Call: _e.mock.On("GetCarModels", _a0)}
}

func (_c *Repository_GetCarModels_Call) Run(run func(_a0 string)) *Repository_GetCarModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_GetCarModels_Call) Return(_a0 []*catalog.CarModel) *Repository_GetCarModels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_GetCarModels_Call) RunAndReturn(run func(string) []*catalog.CarModel) *Repository_GetCarModels_Call {
	_c.Call.Return(run)
	return _c
}

// GetCarTypes provides a mock function with given fields:
func (_m *Repository) GetCarTypes() []*catalog.CarType {
	ret := _m.Called()

	var r0 []*catalog.CarType
	if rf, ok := ret.Get(0).(func() []*catalog.CarType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*catalog.CarType)
		}
	}

	return r0
}

// Repository_GetCarTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCarTypes'
type Repository_GetCarTypes_Call struct {
	*mock.Call
}

// GetCarTypes is a helper method to define mock.On call
func (_e *Repository_Expecter) GetCarTypes() *Repository_GetCarTypes_Call {
	return &Repository_GetCarTypes_Call{Call: _e.mock.On("GetCarTypes")}
}

func (_c *Repository_GetCarTypes_Call) Run(run func()) *Repository_GetCarTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetCarTypes_Call) Return(_a0 []*catalog.CarType) *Repository_GetCarTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_GetCarTypes_Call) RunAndReturn(run func() []*catalog.CarType) *Repository_GetCarTypes_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
